module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input customin[3]
  ) {
  
  sig rst;                  // reset signal
  full_adder fulladder; //Declare CL(Full Adder)
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));//Declare a slower clock for SL
  seq_plus_one plus_one(.clk(slowclock.value), .rst(customin[0] | customin[1] |customin[2]), .switchOn(customin[0] | customin[1] |customin[2]));
  /*Declear SL with slower clock  and the custom inputs as  rst and also the switch to change the state from IDLE to RUNNING*/
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
    counter seven_seg_ctr(#SIZE(2), #DIV(10));//The counter for the seven segment that iterate through the size of 2bits.
      }
    
  }
  seven_seg_select_digit digit(.in(seven_seg_ctr.value));//Declare the selector for the seven segment digit position
  seven_seg_select_value seven_value(.in(seven_seg_ctr.value), .value(plus_one.out|customin));//Declear the selector for the seven segment value.
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    //io_seg = 8hff;          // turn segments off
    //io_sel = 4hf;           // select no digits
    
    fulladder.x = plus_one.out[0] | customin[0];//Output from SL or custom input as A
    fulladder.y = plus_one.out[1] | customin[1];//Output from SL or custom input as B
    fulladder.cin = plus_one.out[2] | customin[2];//Output from SL or custom input as Cin
    
    io_seg = seven_value.out;//Assign the value to the seven segment
    io_sel = digit.out;//Assign the selected digit position for the respective value;

    io_led[2][1] = fulladder.s;
    io_led[2][0] = fulladder.cout;
  }
}